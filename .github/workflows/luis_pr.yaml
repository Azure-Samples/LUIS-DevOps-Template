# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
name: LUIS-PR

# Trigger the workflow on pull request, and only for changes to lu or json files
on:
  pull_request:
    paths:
      - 'luis-app/*.lu'
      - 'luis-app/tests/*.json'

env:
  # Set the name of the master LUIS app
  LUIS_MASTER_APP_NAME: LUISDevOps-master
  # If your repository is Private, set this to true
  IS_PRIVATE_REPOSITORY: false

  # Set the path to the lu file for your LUIS app
  LU_FILE: luis-app/model.lu
  # Set the path to the file for your unit tests
  UNIT_TEST_FILE: luis-app/tests/unittests.json

jobs:
  build:
    name: Build and Test LUIS model (PR)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get LUIS authoring key
      run: |
        keya=$(az cognitiveservices account keys list --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "key1" | xargs)
        echo "::set-env name=LUISAuthoringKey::$keya"
        echo "::add-mask::$keya"

    - name: Get LUIS prediction key
      run: |
        keyp=$(az cognitiveservices account keys list --name ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "key1" | xargs)
        echo "::set-env name=LUISPredictionKey::$keyp"
        echo "::add-mask::$keyp"

    - name: Get LUIS authoring endpoint
      run: |
        az cognitiveservices account show --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "properties.endpoint" | \
        xargs -I {} echo "::set-env name=LUISAuthoringEndpoint::{}"

    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Install botframework-cli
      run: npm i -g @microsoft/botframework-cli@4.10.1

    - name: Bypass botframework-cli telemetry prompts, enable telemetry collection - set to false to disable telemetry collection
      run: echo "::set-env name=BF_CLI_TELEMETRY::true"

    - name: Ludown to LUIS model
      run: bf luis:convert -i $LU_FILE -o ./model.json --name 'LUIS PR pipeline - ${{ github.run_id }}' --versionid 0.1

    # When doing a gate check on PRs, we build a new LUIS application for testing that is later deleted
    - name: Create PR check LUIS application
      run: |
        response=$(bf luis:application:import --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey  --in model.json --json)
        status=$(echo "$response" | jq '.Status' | xargs)
        if [ "$status" == "Success" ]
        then
          appId=$(echo "$response" | jq '.id' | tr -d '\\"')
          echo "::set-env name=LUISAppId::$appId"
        else
          exit 1
        fi

    - name: Train luis
      run: bf luis:train:run --appId $LUISAppId --versionId 0.1 --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey

    - name: Wait for train
      run: |
        while true
        do
          status=`bf luis:version:list --appId $LUISAppId --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey |  jq '.[] | select(.version == "0.1") | .trainingStatus' | xargs`
          if [ "$status" == "Trained" ]
          then
            break
          elif [ "$status" == "Failed" ]
          then
            exit 1
          fi
          echo 'sleep 10'
          sleep 10
        done

    - name: Publish luis
      run: bf luis:application:publish --appId $LUISAppId --versionId 0.1 --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey

    - name: Install dotnet-nlu
      run: dotnet tool install -g dotnet-nlu --version 0.7.5

    - name: Add dotnet Tools to Path
      run: echo "::add-path::$HOME/.dotnet/tools"

    - name: Get Azure subscriptionId
      run: |
        az account show --query 'id' | \
        xargs -I {} echo "::set-env name=AzureSubscriptionId::{}"

    - name: Assign LUIS Azure Prediction resource to application
      shell: pwsh
      run: |
        bf luis:application:assignazureaccount --azureSubscriptionId $env:AzureSubscriptionId --appId $env:LUISAppId --accountName $env:luisPredictionResourceName --subscriptionKey $env:LUISAuthoringKey --endpoint $env:LUISAuthoringEndpoint --resourceGroup $env:azureResourceGroup --armToken $(az account get-access-token --query accessToken -o tsv)
      env:
        luisPredictionResourceName: ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }}
        azureResourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}

    - name: Test Luis model
      run: dotnet nlu test -s luisV3 -u $UNIT_TEST_FILE -o results.json
      env:
        luisAppId: ${{ env.LUISAppId }}
        luisVersionId: 0.1
        luisEndpointKey: ${{ env.LUISPredictionKey }}
        luisPredictionResourceName: ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }}
        luisIsStaging: false

    - name: Analyze Unit test results
      run: dotnet nlu compare -e $UNIT_TEST_FILE -a results.json --unit-test --output-folder unittest

    - name: Archive Unit Test Results
      uses: actions/upload-artifact@v1
      with:
        name: UnitTestResult
        path: unittest/TestResult.xml

    # Delete the LUIS app again if we are executing as gate check on a PR
    - name: Delete luis test target app
      if: always()
      run:  bf luis:application:delete --appId $LUISAppId --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey --force