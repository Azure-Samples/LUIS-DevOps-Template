# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
name: LUIS-CI

# Trigger the workflow on push to the master branch, and only for changes to lu or json files
on:
  push:
    branches:
      - master
    paths:
      - 'luis-app/*.lu'
      - 'luis-app/tests/*.json'

env:
  # Set the name of the master LUIS app
  LUIS_MASTER_APP_NAME: LUISDevOps-master
  # If your repository is Private, set this to true
  IS_PRIVATE_REPOSITORY: false

  # Set the path to the lu file for your LUIS app
  LU_FILE: luis-app/model.lu
  # Set the path to the file for your unit tests
  UNIT_TEST_FILE: luis-app/tests/unittests.json
  # Set the path to the file for your unit tests
  QUALITY_TEST_FILE: luis-app/tests/verificationtests.json

jobs:
  build:
    name: LUIS Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch all history for all tags and branches - for GitVersion
      if: env.IS_PRIVATE_REPOSITORY == 'false'
      run: git fetch --prune --unshallow
    - name: Fetch all history for all tags and branches (private repo) - for GitVersion
      if: env.IS_PRIVATE_REPOSITORY == 'true'
      run: |
        git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git fetch --prune --unshallow

    - name: Install GitVersion v0.9.3
      uses: gittools/actions/gitversion/setup@6dfe406
      with:
        versionSpec: '5.2.x'
    - name: Use GitVersion v0.9.3
      id: gitversion
      uses: gittools/actions/gitversion/execute@6dfe406

    - name: LUISAppVersion env
      run: echo "::set-env name=LUISAppVersion::$GitVersion_SemVer"

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get LUIS authoring key
      run: |
        keya=$(az cognitiveservices account keys list --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "key1" | xargs)
        echo "::set-env name=LUISAuthoringKey::$keya"
        echo "::add-mask::$keya"

    - name: Get LUIS prediction key
      run: |
        keyp=$(az cognitiveservices account keys list --name ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "key1" | xargs)
        echo "::set-env name=LUISPredictionKey::$keyp"
        echo "::add-mask::$keyp"

    - name: Get LUIS authoring endpoint
      run: |
        az cognitiveservices account show --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "properties.endpoint" | \
        xargs -I {} echo "::set-env name=LUISAuthoringEndpoint::{}"

    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Install botframework-cli
      run: npm i -g @microsoft/botframework-cli@4.10.1

    - name: Bypass botframework-cli telemetry prompts, enable telemetry collection - set to false to disable telemetry collection
      run: echo "::set-env name=BF_CLI_TELEMETRY::true"

    - name: Ludown to LUIS model
      run: bf luis:convert -i $LU_FILE -o ./model.json --name 'LUIS CI pipeline - ${{ github.run_id }}' --versionid $LUISAppVersion

    # When doing a merge to master, use the master LUIS app - create if necessary (soft fails if exists)
    - name: Get master LUIS application ID
      run: |
        bf luis:application:create --name $LUIS_MASTER_APP_NAME --subscriptionKey $LUISAuthoringKey  --endpoint $LUISAuthoringEndpoint --versionId=0.1
        bf luis:application:list --subscriptionKey $LUISAuthoringKey  --endpoint $LUISAuthoringEndpoint | \
        jq -c '.[] | select(.name | . and contains('\"$LUIS_MASTER_APP_NAME\"')) | .id' | \
        xargs -I {} echo "::set-env name=LUISAppId::{}"

    # Check that we found the master app Id - failure probably indicates misconfiguration
    - name: Validate application ID
      run: |
        echo "LUIS app Id: $LUISAppId"
        if [ ${#LUISAppId} -ne 36 ]; then
          echo "ERROR: Failed to find LUIS master app. Check workflow configuration."
          exit 1
        fi

    # Determine the current number of versions in the app, naive policy can purge oldest if count is at limit (100)
    # Current implementation prints error message and fails pipeline.
    - name: Check LUIS app version count
      run: |
        version_count=$(bf luis:version:list --appId $LUISAppId --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey  | jq 'length')
        if [ $version_count -ge 100 ]; then
          echo "ERROR: LUIS app: $LUISAppId version count will exceed 100. Delete unneeded versions before re-running pipeline"
          exit 1
        fi

    # When doing a CI/CD run on push to master, we create a new version in an existing LUIS application 
    - name: Create new LUIS application version
      run: bf luis:version:import --appId $LUISAppId --versionId $LUISAppVersion --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey  --in model.json

    - name: Train luis
      run: bf luis:train:run --appId $LUISAppId --versionId $LUISAppVersion --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey

    - name: Wait for train
      run: |
        while true
        do
          status=`bf luis:version:list --appId $LUISAppId --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey |  jq '.[] | select(.version == '\"$LUISAppVersion\"') | .trainingStatus' | xargs`
          if [ "$status" == "Trained" ]
          then
            break
          elif [ "$status" == "Failed" ]
          then
            exit 1
          fi
          echo 'sleep 10'
          sleep 10
        done

    - name: Publish luis
      run: bf luis:application:publish --appId $LUISAppId --direct --versionId $LUISAppVersion --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey

    - name: Install dotnet-nlu
      run: dotnet tool install -g dotnet-nlu --version 0.7.5

    - name: Add dotnet Tools to Path
      run: echo "::add-path::$HOME/.dotnet/tools"

    - name: Get Azure subscriptionId
      run: |
        az account show --query 'id' | \
        xargs -I {} echo "::set-env name=AzureSubscriptionId::{}"

    - name: Assign LUIS Azure Prediction resource to application
      shell: pwsh
      run: |
          bf luis:application:assignazureaccount --azureSubscriptionId $env:AzureSubscriptionId --appId $env:LUISAppId --accountName $env:luisPredictionResourceName --subscriptionKey $env:LUISAuthoringKey --endpoint $env:LUISAuthoringEndpoint --resourceGroup $env:azureResourceGroup --armToken $(az account get-access-token --query accessToken -o tsv)
      env:
        luisPredictionResourceName: ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }}
        azureResourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}

    - name: Test Luis model
      run: dotnet nlu test -s luisV3 -u $UNIT_TEST_FILE -o results.json
      env:
        luisAppId: ${{ env.LUISAppId }}
        luisVersionId: ${{ env.LUISAppVersion }}
        luisDirectVersionPublish: true
        luisEndpointKey: ${{ env.LUISPredictionKey }}
        luisPredictionResourceName: ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }}

    - name: Analyze Unit test results
      run: dotnet nlu compare -e $UNIT_TEST_FILE -a results.json --unit-test --output-folder unittest

    - name: Archive Unit Test Results
      uses: actions/upload-artifact@v1
      with:
        name: UnitTestResult
        path: unittest/TestResult.xml

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.LUISAppVersion }}
        release_name: Release ${{ env.LUISAppVersion }}
        body: |
          Releasing new LUIS endpoint
        draft: false
        prerelease: false

    - name: Get LUIS latest version details file
      run: |
        bf luis:version:list --appId $LUISAppId --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey  --take 1 --out luis_latest_version.json

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`
        asset_path: ./luis_latest_version.json
        asset_name: luis_latest_version.json
        asset_content_type: application/json

  # Job: LUIS quality testing
  LUIS_quality_testing:
    name: LUIS F-measure testing
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get LUIS authoring key
      run: |
        keya=$(az cognitiveservices account keys list --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "key1" | xargs)
        echo "::set-env name=LUISAuthoringKey::$keya"
        echo "::add-mask::$keya"

    - name: Get LUIS prediction key
      run: |
        keyp=$(az cognitiveservices account keys list --name ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "key1" | xargs)
        echo "::set-env name=LUISPredictionKey::$keyp"
        echo "::add-mask::$keyp"

    - name: Get LUIS authoring endpoint
      run: |
        az cognitiveservices account show --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "properties.endpoint" | \
        xargs -I {} echo "::set-env name=LUISAuthoringEndpoint::{}"

    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Install @microsoft/botframework-cli
      run: npm i -g @microsoft/botframework-cli@4.10.1

    - name: Bypass botframework-cli telemetry prompts, enable telemetry collection - set to false to disable telemetry collection
      run: echo "::set-env name=BF_CLI_TELEMETRY::true"

    - name: Get master LUIS application ID
      run: |
        bf luis:application:list --subscriptionKey $LUISAuthoringKey  --endpoint $LUISAuthoringEndpoint | \
        jq -c '.[] | select(.name | . and contains('\"$LUIS_MASTER_APP_NAME\"')) | .id' | \
        xargs -I {} echo "::set-env name=LUISAppId::{}"
        echo "Found LUIS app: $LUISAppId"

    - name: Get LUIS latest version ID
      run: |
        bf luis:version:list --appId $LUISAppId --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey  --take 1 | \
        jq '.[0].version' | \
        xargs -I {} echo "::set-env name=LUISAppVersion::{}"

    - name: Install dotnet-nlu
      run: dotnet tool install -g dotnet-nlu --version 0.7.5

    - name: Add dotnet Tools to Path
      run: echo "::add-path::$HOME/.dotnet/tools"

    - name: Test Luis model with quality verification tests
      run: dotnet nlu test -s luisV3 -u $QUALITY_TEST_FILE -o F-results.json
      env:
        luisAppId: ${{ env.LUISAppId }}
        luisVersionId: ${{ env.LUISAppVersion }}
        luisDirectVersionPublish: true
        luisEndpointKey: ${{ env.LUISPredictionKey }}
        luisPredictionResourceName: ${{ secrets.AZURE_LUIS_PREDICTION_RESOURCE_NAME }}

    - name: download baseline
      if: env.BASELINE_CONTAINER_NAME != ''
      uses: azure/CLI@v1
      with:
        azcliversion: 2.2.0
        inlineScript: |
          az storage blob download  --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} --container-name ${{  env.BASELINE_CONTAINER_NAME  }}  --name statistics.json  --file baselinefile.json --auth-mode login

    - name: Compare Luis model F-measure with baseline
      if: env.BASELINE_CONTAINER_NAME != ''
      run: dotnet nlu compare -e $QUALITY_TEST_FILE -a F-results.json --baseline baselinefile.json --test-settings luis-app/tests/compare.yml

    # if no baseline configured, then we just compare against the expected results to create statistics that can become the new baseline
    - name: Analyze Luis model F-measure - Create baseline
      if: env.BASELINE_CONTAINER_NAME == ''
      run: dotnet nlu compare -e $QUALITY_TEST_FILE -a F-results.json

    - name: Archive Quality Test Results
      if: env.BASELINE_CONTAINER_NAME != ''
      uses: actions/upload-artifact@v1
      with:
        name: QualityTestResult
        path: TestResult.xml

    - name: upload statistics
      uses: azure/CLI@v1
      with:
        azcliversion: 2.2.0
        inlineScript: |
          az storage container create  --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}  --name ${{ github.sha }}  --auth-mode login
          az storage blob upload  --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}  --container-name ${{ github.sha }} --name statistics.json --file statistics.json  --auth-mode login

  # Job: Continuous deployment job for LUIS
  release:
    name: LUIS CD
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Install @microsoft/botframework-cli
      run: npm i -g @microsoft/botframework-cli@4.10.1

    - name: Bypass botframework-cli telemetry prompts, enable telemetry collection - set to false to disable telemetry collection
      run: echo "::set-env name=BF_CLI_TELEMETRY::true"

    - name: Get LUIS authoring key
      run: |
        keya=$(az cognitiveservices account keys list --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "key1" | xargs)
        echo "::set-env name=LUISAuthoringKey::$keya"
        echo "::add-mask::$keya"

    - name: Get LUIS authoring endpoint
      run: |
        az cognitiveservices account show --name ${{ secrets.AZURE_LUIS_AUTHORING_RESOURCE_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "properties.endpoint" | \
        xargs -I {} echo "::set-env name=LUISAuthoringEndpoint::{}"

    - name: Get master LUIS application ID
      run: |
        bf luis:application:list --subscriptionKey $LUISAuthoringKey --endpoint $LUISAuthoringEndpoint | \
        jq -c '.[] | select(.name | . and contains('\"$LUIS_MASTER_APP_NAME\"')) | .id' | \
        xargs -I {} echo "::set-env name=LUISAppId::{}"
        echo "Found LUIS app: $LUISAppId"

    - name: Get LUIS latest version ID
      run: |
        bf luis:version:list --appId $LUISAppId --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey --take 1 --out luis_latest_version.json
        cat luis_latest_version.json | jq '.[0].version' | \
        xargs -I {} echo "::set-env name=LUISAppVersion::{}"

    - name: Publish LUIS to PRODUCTION
      run: bf luis:application:publish --appId $LUISAppId --versionId $LUISAppVersion --endpoint $LUISAuthoringEndpoint --subscriptionKey $LUISAuthoringKey